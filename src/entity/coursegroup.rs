//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;
use crate::entity::course::GetSingleCourse;
use serde::{Deserialize, Serialize};
use crate::entity::{course, coursegroup};
use sea_orm::FromQueryResult;

#[derive(Clone, Debug, PartialEq, Deserialize, Serialize, DeriveEntityModel)]
#[sea_orm(table_name = "coursegroup")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Custom(\"LONGTEXT\".to_owned())")]
    pub name: String,
    #[sea_orm(column_type = "Custom(\"LONGTEXT\".to_owned())")]
    pub code: String,
    #[sea_orm(column_type = "Custom(\"LONGTEXT\".to_owned())")]
    pub department: String,
    #[sea_orm(column_type = "Custom(\"LONGTEXT\".to_owned())")]
    pub campus_name: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::course::Entity")]
    Course,
}

impl Related<super::course::Entity> for Entity {
    fn to() -> RelationDef {
        super::coursegroup_course::Relation::Course.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::coursegroup_course::Relation::Coursegroup.def().rev())
    }
}
impl From<Model> for GetSingleCourseGroup {
    fn from(model: Model) -> Self {
        GetSingleCourseGroup {
            id: model.id,
            name: model.name,
            code: model.code,
            department: model.department,
            campus_name: model.campus_name,
            course_list: vec![],
        }
    }
}

#[derive(Debug, Clone, Deserialize, Serialize)]
pub struct GetSingleCourseGroup {
    pub id: i32,
    pub name: String,
    pub code: String,
    pub department: String,
    pub campus_name: String,
    pub course_list: Vec<GetSingleCourse>,
}

impl GetSingleCourseGroup {
    pub fn new(model: Model, course_list: Vec<GetSingleCourse>) -> GetSingleCourseGroup {
        let mut group: GetSingleCourseGroup = model.into();
        group.course_list = course_list;
        group
    }
}

impl ActiveModelBehavior for ActiveModel {}
