//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use crate::review;
use crate::review::GetReview;
use sea_orm::{entity::prelude::*, ActiveValue::NotSet};
use sea_orm::{ModelTrait, Set};
use serde::{Deserialize, Serialize};
use utoipa::ToSchema;

#[derive(Clone, Debug, PartialEq, Deserialize, Serialize, DeriveEntityModel, ToSchema)]
#[sea_orm(table_name = "course")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")")]
    pub name: String,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")")]
    pub code: String,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")")]
    pub code_id: String,
    pub credit: f64,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")")]
    pub department: String,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")")]
    pub campus_name: String,
    #[sea_orm(column_type = "custom(\"LONGTEXT\")")]
    pub teachers: String,
    pub max_student: i32,
    pub week_hour: i32,
    pub year: i32,
    pub semester: i32,
    pub coursegroup_id: Option<i32>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Coursegroup,
    Review,
}

// @w568w (2023-02-15): sea-orm 的宏似乎不支持同时有 belongs_to 和 has_many，所以这里手动实现 trait
impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Coursegroup => Entity::belongs_to(super::coursegroup::Entity)
                .from(Column::CoursegroupId)
                .to(super::coursegroup::Column::Id)
                .into(),
            Self::Review => Entity::has_many(review::Entity).into(),
        }
    }
}

impl Related<review::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Review.def()
    }
}

impl Related<super::coursegroup::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Coursegroup.def()
    }
}

impl From<Model> for GetSingleCourse {
    fn from(model: Model) -> Self {
        GetSingleCourse {
            id: model.id,
            name: model.name,
            code: model.code,
            code_id: model.code_id,
            credit: model.credit,
            department: model.department,
            campus_name: model.campus_name,
            teachers: model.teachers,
            max_student: model.max_student,
            week_hour: model.week_hour,
            year: model.year,
            semester: model.semester,
            review_list: vec![],
        }
    }
}

impl GetSingleCourse {
    pub async fn load(model: Model, db: &DatabaseConnection, user_id: i32) -> Result<Self, DbErr> {
        let review_raw_list: Vec<review::Model> =
            model.find_related(review::Entity).all(db).await?;
        let mut course: Self = model.into();
        let mut review_list: Vec<GetReview> = vec![];
        for review in review_raw_list {
            review_list.push(GetReview::load(review, db, user_id).await?);
        }
        course.review_list = review_list;
        Ok(course)
    }
}

#[derive(Debug, Clone, Deserialize, Serialize, ToSchema)]
pub struct GetSingleCourse {
    pub id: i32,
    pub name: String,
    pub code: String,
    pub code_id: String,
    pub credit: f64,
    pub department: String,
    pub campus_name: String,
    pub teachers: String,
    pub max_student: i32,
    pub week_hour: i32,
    pub year: i32,
    pub semester: i32,
    pub review_list: Vec<GetReview>,
}

#[derive(Debug, Clone, Deserialize, Serialize, ToSchema)]
pub struct NewCourse {
    pub name: String,
    pub code: String,
    pub code_id: String,
    pub credit: f64,
    pub department: String,
    pub campus_name: String,
    pub teachers: String,
    pub max_student: i32,
    pub week_hour: i32,
    pub year: i32,
    pub semester: i32,
}

impl NewCourse {
    pub fn into_active_model(self, coursegroup_id: i32) -> ActiveModel {
        ActiveModel {
            id: NotSet,
            name: Set(self.name),
            code: Set(self.code),
            code_id: Set(self.code_id),
            credit: Set(self.credit),
            department: Set(self.department),
            campus_name: Set(self.campus_name),
            teachers: Set(self.teachers),
            max_student: Set(self.max_student),
            week_hour: Set(self.week_hour),
            year: Set(self.year),
            semester: Set(self.semester),
            coursegroup_id: Set(Some(coursegroup_id)),
        }
    }
}

impl ActiveModelBehavior for ActiveModel {}
